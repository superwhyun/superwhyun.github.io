<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-02-04T17:09:10+09:00</updated><id>http://localhost:4000/</id><title type="html">U2PIA</title><subtitle>Joy of learning</subtitle><author><name>Wook Hyun</name></author><entry><title type="html">센서 데이터 Text-Binary 변환 엔진</title><link href="http://localhost:4000/upcoming/yaml-json-bin-convert.html" rel="alternate" type="text/html" title="센서 데이터 Text-Binary 변환 엔진" /><published>2018-02-04T00:00:00+09:00</published><updated>2018-02-04T00:00:00+09:00</updated><id>http://localhost:4000/upcoming/yaml-json-bin-convert</id><content type="html" xml:base="http://localhost:4000/upcoming/yaml-json-bin-convert.html">&lt;h1 id=&quot;데이터-notationserialization-변환-기능&quot;&gt;데이터 notation/serialization 변환 기능&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;개발목표
    &lt;ul&gt;
      &lt;li&gt;데이터에 대한 notation 방식/설정은 YAML로 하고, 예제 데이터를 JSON으로 생성케 하고, JSON 데이터를 바이너리로 변환하는 기능
        &lt;ul&gt;
          &lt;li&gt;YAML에서 스키마를 조정할 때마다 자동으로 JSON 예제 만들어지고, 관련 Parser/Generator 또한 연계되어 작성되도록 하는 것을 목표로 함.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;yamljson&quot;&gt;YAML/JSON&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;YAML은 JSON보다 human 가독성은 더 좋음. 그래서 설정파일 다룰때 많이 씀&lt;/li&gt;
  &lt;li&gt;JSON은 데이터를 담을 때 많이 씀&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기본자료형&quot;&gt;기본자료형&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;스칼라(scalar)&lt;/strong&gt; : 문자열, 숫자&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;시퀀스(sequence)&lt;/strong&gt; : 배열, 리스트를 표현하며, 들여쓰기/’-‘를 구분자로 이용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;맵핑(mapping)&lt;/strong&gt; : 해시, 딕셔너리, key/value 등을 표현하며, ‘:’를 구분자로 이용&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;예제&quot;&gt;예제&lt;/h3&gt;

&lt;h4 id=&quot;배열&quot;&gt;배열&lt;/h4&gt;

&lt;p&gt;&lt;span style=&quot;color:blue; font-size:5pt&quot;&gt;YAML&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Mark McGwire&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Sammy Sosa&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ken Griffey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;color:blue; font-size:5pt&quot;&gt;JSON&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mark McGwire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sammy Sosa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ken Griffey&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;keyvalue&quot;&gt;Key/Value&lt;/h4&gt;
&lt;p&gt;&lt;span style=&quot;color:blue; font-size:5pt&quot;&gt;YAML&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;c1&quot;&gt;# Mapping of scalars to scalars(player statics)&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;65&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Home runs&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.278&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Batting average&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;rbi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;147&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Runs Batted In&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;color:blue; font-size:5pt&quot;&gt;JSON&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;avg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.278&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rbi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;147&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;keyarray&quot;&gt;Key/Array&lt;/h4&gt;
&lt;p&gt;&lt;span style=&quot;color:blue; font-size:5pt&quot;&gt;YAML&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;c1&quot;&gt;# Mapping of scalars to sequences(ball clubs in each league)&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;american&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Boston Red Sox&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Detroit Tigers&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;New York Yankees&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;national&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;New York Mets&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Chicago Cubs&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Atlanta Braves&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;color:blue; font-size:5pt&quot;&gt;JSON&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;american&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Boston Red Sox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Detroit Tigers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New York Yankees&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;national&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New York Mets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Chicago Cubs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Atlanta Braves&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;array&quot;&gt;Array&lt;/h4&gt;
&lt;p&gt;&lt;span style=&quot;color:blue; font-size:5pt&quot;&gt;YAML&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;c1&quot;&gt;# in-line flow style for compact notation&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avg&lt;/span&gt;  &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mark McGwire&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0.278&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sammy Sosa&lt;/span&gt;  &lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0.288&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;color:blue; font-size:5pt&quot;&gt;JSON&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;avg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mark McGwire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.278&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sammy Sosa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.288&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;etc&quot;&gt;ETC&lt;/h4&gt;
&lt;p&gt;얘네는 conversion error가 생기네.. 왜 그런지 모르겠음. 공부가 필요할 뿐!&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;c1&quot;&gt;# Sequence of mappings(players' statics)&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Mark McGwire&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;65&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;0.278&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Sammy Sosa&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;63&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;0.288&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# in-line flow style for compact notation&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Mark McGwire&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0.278&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Mark McGwire&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0.278&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Sammy Sosa&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0.288&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/data-serialization-comparison-json-yaml-bson-messagepack/&quot;&gt;https://www.sitepoint.com/data-serialization-comparison-json-yaml-bson-messagepack/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://anitoy.pe.kr/yaml-format/&quot;&gt;http://anitoy.pe.kr/yaml-format/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.browserling.com/tools/yaml-to-json&quot;&gt;yaml to json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.browserling.com/tools/json-to-yaml&quot;&gt;json to yaml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sjava.net/tag/protocol-buffer/&quot;&gt;http://sjava.net/tag/protocol-buffer/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Wook Hyun</name></author><category term="blog" /><summary type="html">데이터 notation/serialization 변환 기능</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/conversion.jpg" /></entry><entry><title type="html">우분투 17.10.1에 nvidia-docker 올리기</title><link href="http://localhost:4000/documentation/nvidia-docker.html" rel="alternate" type="text/html" title="우분투 17.10.1에 nvidia-docker 올리기" /><published>2018-02-03T00:00:00+09:00</published><updated>2018-02-03T00:00:00+09:00</updated><id>http://localhost:4000/documentation/nvidia-docker</id><content type="html" xml:base="http://localhost:4000/documentation/nvidia-docker.html">&lt;h1 id=&quot;ubuntu-17101에-nvidia-docker-설치하는-순서&quot;&gt;Ubuntu 17.10.1에 Nvidia-Docker 설치하는 순서&lt;/h1&gt;

&lt;p&gt;nvidia-docker의 공식홈페이지에 연결된 위키에 절차가 나와 있음. 
https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0)&lt;/p&gt;

&lt;p&gt;그러나, 이 내용만으로는 부족해서 다시 정리함&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ubuntu 설치 –&amp;gt; 평소 하던대로
www.ubuntu.com&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nvidia 비디오 카드 드라이버 다운로드
&lt;a href=&quot;http://www.nvidia.com/content/DriverDownload-March2009/confirmation.php?url=/XFree86/Linux-x86_64/390.25/NVIDIA-Linux-x86_64-390.25.run&amp;amp;lang=us&amp;amp;type=TITAN&quot;&gt;http://www.nvidia.com/content/DriverDownload-March2009/confirmation.php?url=/XFree86/Linux-x86_64/390.25/NVIDIA-Linux-x86_64-390.25.run&amp;amp;lang=us&amp;amp;type=TITAN&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nueveo 비디오 드라이버 동작 정지
오픈소스 비디오카드 드라이버인 nouveau를 정지시켜야 한다. 자세한 방법은 &lt;a href=&quot;https://codeyarns.com/2017/09/21/how-to-disable-nouveau-driver/&quot;&gt;https://codeyarns.com/2017/09/21/how-to-disable-nouveau-driver/&lt;/a&gt; 참고.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;GUI 모드 해제 작업
    &lt;blockquote&gt;
      &lt;p&gt;$sudo systemctl set-default multi-user.target&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;재부팅&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Nvidia 비디오 드라이버 설치
터미널만 뜬 상태에서 로그인 후 루트 권한으로 실행
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo ./NVIDIA-Driver-xxxxx.sh&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;GUI 모드로 전환 후 재부팅
    &lt;blockquote&gt;
      &lt;p&gt;$sudo systemctl set-default graphical.target&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;docker CE 설치 - 
&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository&quot;&gt;https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;nvidia-docker 설치/테스트 -
https://nvidia.github.io/nvidia-docker/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt; : 커널 패치 한 이후에 software update하면 먹통됨. 왠만하면 우분투 설치하자마자 software update하고.. 커널 패치하는게 좋음.&lt;/p&gt;</content><author><name>Wook Hyun</name></author><category term="blog" /><summary type="html">Ubuntu 17.10.1에 Nvidia-Docker 설치하는 순서</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nvidia-docker.png" /></entry><entry><title type="html">Git, Github 활용 팁 정리</title><link href="http://localhost:4000/documentation/git-commands.html" rel="alternate" type="text/html" title="Git, Github 활용 팁 정리" /><published>2018-02-03T00:00:00+09:00</published><updated>2018-02-03T00:00:00+09:00</updated><id>http://localhost:4000/documentation/git-commands</id><content type="html" xml:base="http://localhost:4000/documentation/git-commands.html">&lt;p&gt;많이들 쓰니까 좋은갑따~ 하긴 하는데, 어떤 X이 git이 쉽다고 그런건지는 모르겠다만,.. 명령어도 많고 옵션도 많고.. 문제도 많이 생기고… 설명들도 개떡같고…&lt;/p&gt;

&lt;h2 id=&quot;git-command&quot;&gt;Git command&lt;/h2&gt;

&lt;p&gt;git가 초기 나왔을 때에는 몇가지 커맨드만 사용하면 되었는데, 요즘은 너무 많고 이해하기도 어렵다. 그냥 많이 써본 것과 유용할 것으로 판단되는 몇가지들만 정리해 본다.&lt;/p&gt;

&lt;h3 id=&quot;소스코드를-다운-받을-때&quot;&gt;소스코드를 다운 받을 때&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone [address]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;소스코드를-올릴-때&quot;&gt;소스코드를 올릴 때&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
$ git remote add https://[git-repository-address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .
$ git commit -m &quot;comments&quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://linode.com/docs/assets/git-github-workflow-1000w.png&quot; alt=&quot;git, github&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;trouble-shooting&quot;&gt;Trouble Shooting&lt;/h2&gt;

&lt;h3 id=&quot;q-git-remote-repository에-push하려면-모든-코드를-일단-다-받아놔야-하나&quot;&gt;Q. Git remote repository에 push하려면 모든 코드를 일단 다 받아놔야 하나?&lt;/h3&gt;

&lt;p&gt;필요한 파일 하나만 바꾸고, 그 녀석만 올릴 수는 없을까? 가능할까?&lt;/p&gt;

&lt;h3 id=&quot;q-git-commit-이-많이-쌓이면&quot;&gt;Q. Git commit 이 많이 쌓이면?&lt;/h3&gt;

&lt;p&gt;commit이 많은 코드를 git clone할 때 마다 모든 히스토리가 따라오기 때문에 크기가 커지는 것 같다. 이런 히스토리를 정리하면 좀 가벼워질 듯.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git merge&lt;/strong&gt;를 쓰면 될 듯.&lt;/p&gt;

&lt;h3 id=&quot;mac에서-github-계정-없애기&quot;&gt;Mac에서 github 계정 없애기&lt;/h3&gt;

&lt;p&gt;가끔 다른 github 계정을 써야 할 경우가 있는데, github account 계정이 시스템 내에 저장되어서 변경이 안된다.
둘을 다 쓰게 하는 방법도 있기는 하나, 해야 할 것이 많다. 걍 날리려면 아래처럼 하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://help.github.com/articles/updating-credentials-from-the-osx-keychain/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wook Hyun</name></author><category term="blog" /><summary type="html">많이들 쓰니까 좋은갑따~ 하긴 하는데, 어떤 X이 git이 쉽다고 그런건지는 모르겠다만,.. 명령어도 많고 옵션도 많고.. 문제도 많이 생기고… 설명들도 개떡같고…</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nature-1.jpg" /></entry><entry><title type="html">Source code 예쁘게 프린트 하기</title><link href="http://localhost:4000/documentation/source-code-print.html" rel="alternate" type="text/html" title="Source code 예쁘게 프린트 하기" /><published>2018-02-02T00:00:00+09:00</published><updated>2018-02-02T00:00:00+09:00</updated><id>http://localhost:4000/documentation/source-code-print</id><content type="html" xml:base="http://localhost:4000/documentation/source-code-print.html">&lt;div style=&quot;text-align: right; font-size: 50%&quot;&gt; 
 &lt;a href=&quot;https://www.crazyegg.com/blog/8-reasons-analyze-source-code/&quot;&gt;image from&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Visual Studio/Xcode 등을 이용해서 소스코드 프린트하면 글자 짤리고 폰트 너무 크고 등등의 이유로 보기가 좋지 않다. 예전엔 c2ps, c2pdf등이 있어서 참 잘 썼는데, 이제는 지원이 안되거나 한다.
a2ps를 써도 되긴 하는데, 얘도 거의 노인학대 수준이라 요즘에 쓰기가 어려운 경우가 많다.&lt;/p&gt;

&lt;p&gt;그래서 좀 뒤져봤더니,… 몇가지가 찾은 것을 정리함.&lt;/p&gt;

&lt;h2 id=&quot;enscript&quot;&gt;enscript&lt;/h2&gt;

&lt;p&gt;c2ps, a2ps의 대체자로 자리매김한 듯한 command line 명령어이다. 맥에서는 brew를 이용하면 설치 가능하며, 리눅스 계열은 apt-get으로 설치한다.
소스코드는 예쁘게 잘 뽑아주기는 하나, 한글지원이 안된다.&lt;/p&gt;

&lt;h3 id=&quot;source-code-printing-example&quot;&gt;Source code printing example&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enscript -2Gr --color -Eperl naver.py -p a.ps
enscript -2Gr --color -Ejavascript sample.js -o s.ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;text-printing-example&quot;&gt;Text printing example&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% enscript -G stuff.txt
  Fancy (&quot;Gaudy&quot;) headers
% enscript -2r stuff.txt
  Two-up printing -- two pages side-by-side on each page of paper
% enscript -2Gr stuff.txt
  Two-up with fancy headers
% enscript -P otherps stuff.txt
  Print to the otherps printer instead of the default
% enscript -d otherps stuff.txt
  Ditto
% enscript -i 4 stuff.txt
  Indent every line four spaces
% enscript --pretty-print=cpp Object.cc
  Pretty print C++ source code
% enscript -E doit.pl
  Pretty print doit.pl (and automagically figure out that it's Perl from the .pl suffix)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;[&lt;a href=&quot;https://docstore.mik.ua/orelly/unix3/upt/ch45_07.htm&quot;&gt;1&lt;/a&gt;]&lt;/p&gt;</content><author><name>Wook Hyun</name></author><category term="blog" /><summary type="html">image from</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/source-code.jpg" /></entry><entry><title type="html">Github.io Blog 만들기</title><link href="http://localhost:4000/documentation/github-blog.html" rel="alternate" type="text/html" title="Github.io Blog 만들기 " /><published>2018-02-02T00:00:00+09:00</published><updated>2018-02-02T00:00:00+09:00</updated><id>http://localhost:4000/documentation/github-blog</id><content type="html" xml:base="http://localhost:4000/documentation/github-blog.html">&lt;h2 id=&quot;githubio-에-블로그--만들기&quot;&gt;Github.io 에 블로그  만들기&lt;/h2&gt;

&lt;p&gt;다양한 블로그 사이트가 있기는 하나, git을 이용해서 관리가 가능하다는 장점이 있으며 markdown을 쓸 수 있어서 ithub.io를 이용해 보기로 함.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;githubio에-블로그-주소-만들기&quot;&gt;Github.io에 블로그 주소 만들기&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Github에 계정만들기&lt;/li&gt;
  &lt;li&gt;새로운 repository를 ‘계정명.github.io’로 만든다.
    &lt;ul&gt;
      &lt;li&gt;예전에는 새로운 브랜치를 만들어서 했는데, 이제 그렇게 하지 않아도 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git push를 통해 내가 만든 홈페이지를 올린다. 끗.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jekyll-템플릿-이용하기&quot;&gt;Jekyll 템플릿 이용하기&lt;/h3&gt;

&lt;p&gt;내가 만든 홈페이지가 있다면 그냥 github에 올리면 되지만, 새로 만들려면 이미 만들어진 템플릿을 쓰는 것도 좋다. 마침 github.io에서 jekyll 이라는 프레임워크를 지원하니 이것을 사용해 보도록 하자.&lt;/p&gt;

&lt;p&gt;일단 로컬에서 작업한 이후 Github에 push를 하는 형태로 개발하면 되는데, 로컬에서 작업할 때 Jekyill로 만들어진 페이지들은 일반 웹서버에서는 보여지지 않는다. 그렇기 떄문에 전용 웹서버를 jekyill 툴로 구동시켜야만 한다. 자세한 내용은 &lt;a href=&quot;https://mycyberuniverse.com/web/how-fix-jekyll-build-serve-error-message.html&quot;&gt;여기&lt;/a&gt;를 참고하자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[1] 템플릿 다운로드&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;템플릿을 &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;여기&lt;/a&gt;에서 다운받아 압축을 푼 디렉토리로 가서.. 아래 명령을 실행한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ gem install bundler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ bundle install&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ bundle exec jekyll serve&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;[2] 로컬 서버 접속하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그리고 웹 브라우저에서 잘 동작하는지 들여다 보자. 브라우저를 열고 주소창에 http://localhost:4000 를 입력하자&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[3] 원격 서버에 업로드하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;잘 만들어진 것 같으면 github에 push하기&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ git push origin master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;[4] 원격 서버 접속하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://계정명.github.io 에 접속해 보기. 끗.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[5] Jekyll 설정 잡아보기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;_config.yml 과 _settings.yml 만 만지면 된다. 보면 안다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jekyll-기반-글쓰기&quot;&gt;Jekyll 기반 글쓰기&lt;/h3&gt;

&lt;p&gt;_post/ 디렉토리 밑에 naming 규칙에 맞게 파일을 생성하고, YAML front matter block에 간단한 메타데이터를 입려하면 자동으로 페이지가 생성된다.&lt;/p&gt;

&lt;p&gt;주의할 점으로,..&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;YML font matter block에 포함된 image 파라미터에는 external link image를 달 수가 없다. 즉, assets/img/ 밑에 위치한 이미지만 로딩 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;댓글-달기-기능-추가하기&quot;&gt;댓글 달기 기능 추가하기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;markdown-사용-팁&quot;&gt;Markdown 사용 팁&lt;/h3&gt;

&lt;p&gt;전체 목록은 &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;[마크다운 깃헙 가이드]&lt;/a&gt;를 참고하자. 이 포스트에서는 그 외의 것들을 다뤄본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;글자에 색상을 넣고, 글자 크기도 조정하고 싶어요&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;color:blue;font-size:8pt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;aaa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;trouble-shooting&quot;&gt;Trouble shooting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;새로만든 페이지가 보이지 않는다.
    &lt;ul&gt;
      &lt;li&gt;여러 가능성이 있지만, 아래 명령을 실행한 후 로그 메시지를 확인한다.
        &lt;blockquote&gt;
          &lt;p&gt;bundle exec jekyll build –verbose&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;ul&gt;
          &lt;li&gt;파일명에 기술된 날짜가 future 인지 확인. 오늘 날짜보다 다음 날짜인 경우 인식하지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jekyll 실행시 에러가 나온다.
    &lt;ul&gt;
      &lt;li&gt;명령어 실행구문이 바뀐 모양이다. 아래 명령을 실행하자.
        &lt;blockquote&gt;
          &lt;p&gt;bundle exec jekyll serve –watch&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30625044/jekyll-post-not-generated&quot;&gt;https://stackoverflow.com/questions/30625044/jekyll-post-not-generated&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Wook Hyun</name></author><category term="blog" /><summary type="html">Github.io 에 블로그 만들기</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/cuba-1.jpg" /></entry><entry><title type="html">증명사진 이미지 생성 서비스 개발기</title><link href="http://localhost:4000/documentation/dev-log-idphoto.html" rel="alternate" type="text/html" title="증명사진 이미지 생성 서비스 개발기" /><published>2018-02-02T00:00:00+09:00</published><updated>2018-02-02T00:00:00+09:00</updated><id>http://localhost:4000/documentation/dev-log-idphoto</id><content type="html" xml:base="http://localhost:4000/documentation/dev-log-idphoto.html">&lt;p&gt;증명사진 스캔 파일을 업로드하면, 여권/비자/반명함/증명사진 규격으로 프린트할 수 있도록 크기를 잡아주고 collage를 만들어 주는 웹 서비스로 뜻밖에 유료로 서비스하는 곳이 많음. express, node.js를 이용해서 drag &amp;amp; drop으로 file upload하고, 원하는 규격별로 사이즈 잡은 후에 photo-collage 라이브러리를 이용해 A4 한장에 여러 장의 사진이 배치되도록 함.&lt;/p&gt;

&lt;h1 id=&quot;소스코드-다운-받기&quot;&gt;소스코드 다운 받기&lt;/h1&gt;

&lt;p&gt;TBD: github에 업로드 예정.&lt;/p&gt;

&lt;h1 id=&quot;개발구동-환경설정&quot;&gt;개발/구동 환경설정&lt;/h1&gt;

&lt;p&gt;package.json에 기재된 라이브러리들을 설치해 준다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IDphoto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;private&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node app.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body-parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.13.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~3.3.7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;canvas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.6.9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ejs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~2.5.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ejs-locals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~4.14.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jquery&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~3.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;multer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;multiparty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~4.1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;photo-collage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;serve-index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.8.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;package.json이 있는 디렉토리에서 아래 명령을 실행.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ npm install&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;맥의 경우에는 아래의 명령어를 통해 필요한 라이브러리들을 설치하도록 한다. 리눅스의 경우에는 딱히 신경 쓰지 않아도 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;brew install pkg-config cairo pango libpng jpeg giflib&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;trouble-shooting&quot;&gt;Trouble shooting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;node canvas 관련 에러 나오면, &lt;a href=&quot;https://github.com/Automattic/node-canvas&quot;&gt;여기&lt;/a&gt; 참고&lt;/li&gt;
  &lt;li&gt;libpng 에러가 나올땐 &lt;a href=&quot;https://github.com/Automattic/node-canvas/wiki/installation---osx#installing-cairo&quot;&gt;여기&lt;/a&gt; 참고&lt;/li&gt;
  &lt;li&gt;Pixman 관련 에러가 나오면 &lt;a href=&quot;http://macappstore.org/pixman/&quot;&gt;여기&lt;/a&gt; 참고&lt;/li&gt;
  &lt;li&gt;node.js는 비동기로 동작하기 때문에 생성된 collage 사진을 지우면 오동작함. 그래서, 할수없이 container내에 위치시키도록 했음. 즉, 컨테이너 내려가면 같이 삭제됨. 또한, 파일이름은 난수로 생성되어 외부 접근이 불가하므로 프라이버시 이슈는 없을 듯하나… 개선은 필요한 부분.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;도커-이미지로-만들기&quot;&gt;도커 이미지로 만들기&lt;/h1&gt;

&lt;p&gt;도커에서 구동되게 하기 위해 이미지를 만들때 아래와 같이 함.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;FROM node&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR /usr/src/app&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY ./site /usr/src/app&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;EXPOSE 5959&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN npm install&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CMD npm start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker-compose.yml에는 아래와 같이 구성함.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;idphoto&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;idphoto&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5959:5959&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./app/ID_photo&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;frontend&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;traefik&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.port=5959'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.enable=true'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.docker.network=traefik'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.backend=idphoto'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.frontend.rule=Host:idphoto.u2pia.local'&lt;/span&gt;   
    &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;replicas &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;    
      &lt;span class=&quot;na&quot;&gt;restart_policy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;on-failure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Wook Hyun</name></author><category term="dev log" /><summary type="html">증명사진 스캔 파일을 업로드하면, 여권/비자/반명함/증명사진 규격으로 프린트할 수 있도록 크기를 잡아주고 collage를 만들어 주는 웹 서비스로 뜻밖에 유료로 서비스하는 곳이 많음. express, node.js를 이용해서 drag &amp;amp; drop으로 file upload하고, 원하는 규격별로 사이즈 잡은 후에 photo-collage 라이브러리를 이용해 A4 한장에 여러 장의 사진이 배치되도록 함.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/id_photo.png" /></entry><entry><title type="html">Docker, Docker swarm 사용기</title><link href="http://localhost:4000/documentation/docker-swarm.html" rel="alternate" type="text/html" title="Docker, Docker swarm 사용기" /><published>2018-01-30T00:00:00+09:00</published><updated>2018-01-30T00:00:00+09:00</updated><id>http://localhost:4000/documentation/docker-swarm</id><content type="html" xml:base="http://localhost:4000/documentation/docker-swarm.html">&lt;h1 id=&quot;vagrant-commands&quot;&gt;Vagrant commands&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;실행 - vagrant up
상태 - vagrant status
삭제 - vagrant destroy
중지 - vagrant halt
로긴 - vagrant ssh [machine name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt; : 다른 포스트로 옮길 것.&lt;/p&gt;

&lt;h1 id=&quot;docker&quot;&gt;Docker&lt;/h1&gt;

&lt;p&gt;먼저 Docker를 제대로 활용하려면 다음을 이해해야 함&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;image&lt;/li&gt;
  &lt;li&gt;container&lt;/li&gt;
  &lt;li&gt;swarm&lt;/li&gt;
  &lt;li&gt;service&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;docker-기본-명령어&quot;&gt;Docker 기본 명령어&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Docker image 설치&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker pull [img_name]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;공식 image repository인 hub.docker.com에 등록된 이미지를 받아온다. 자체 구축한 repository에서 받아오게 할 수도 있으나, 그건 다음 기회에 설명.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Docker container 실행&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker run -d -p 9999:80 [img_name]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Docker image 생성&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker build -t [maker/name] .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dockerfile 이 위치한 디렉토리에서 실행해야 함.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Docker container의 터미널에 접근&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker exec -it [container] /bin/bash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Docker container에 있는 명령어 한번만 실행하기&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker run -it –rm alpine /bin/sh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm 옵션은 해당 프로세스가 종료되면 컨테이너도 같이 종료시킴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;docker-swarm-관련-명령어&quot;&gt;Docker swarm 관련 명령어&lt;/h2&gt;

&lt;p&gt;Docker swarm은 여러개의 machine들이 마치 하나의 클러스터처럼 동작하도록 하는 것인데, 불행히도 docker for mac/windows는 single node만 지원한다. 제대로된 클러스터링을 하려면 리눅스에서만 가능하다. 즉, 윈도우/맥은 개발할 때만 쓰란 얘기임. 이 이유가 어차피 윈도우/맥은 native가 아니니까 자체적으로 virutal machine을 띄우고 그 위에 리눅스를 올릴 수 밖에 없어서 성능의 20~30% 이상은 손해보고 들어가는 구조라 정식 서비스에서는 아무래도 낭비요소가 있기 때문일 것으로 생각한다.&lt;/p&gt;

&lt;p&gt;개념적으로 swarm이라는 것을 manager와 일반 node로 나눠서 동작을 볼 필요가 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In manager&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker swarm init –advertise-addr [host-ip-address]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 이 명령어를 실행하면 해당 swarm에 할당된 token 과 일반 다른 node에서 실행해야 할 command를 알려준다. 복사해 두자.
* host-ip-address는 실제 machine의 ip 주소를 의미한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;In nodes&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker swarm join –token [token] [host-ip-address:2377]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 조금 전 manager node가 알려준 command를 실행한다. machine이 여러 대면 같은 작업을 반복한다. 메뚝메뚝!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;In manager&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker node ls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 클러스터에 join되어 있는 모든 node들의 목록을 보여준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;docker-service-관련-명령어&quot;&gt;Docker service 관련 명령어&lt;/h2&gt;

&lt;p&gt;swarm mode가 아니어도 동일하게 실행 할 수 있ㄷ. 혹시 swarm cluster에서 구동시키고자 한다면 manager node에서 동작시키도록 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker service create –name [service_name] –name [name] –network=[net_name] –replicas [num] -e [environment value] -p [port]:[port] [img_name:img_ver]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 하나의 docker image를 service로 cluster에서 구동시키는 명령으로, swarm 내의 적절한 노드에 알아서 구동된다.
* manager machine에 해당 이미지가 없으면 docker hub에서 다운로드 하며, local repository에서 받아오게 할 수도 있음.
* -p : port mapping
* --network : 서비스가 연결될 가상의 network 이름 
* --replicas : 몇개의 프로세스 복제본을 돌릴 것인가
* -e : container에서 환경변수를 사용함
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker service ls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 현재 구동되고 있는 서비스의 목록을 보여준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker service ps [service_name]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 어느 노드에서 몇 개의 replica가 돌고 있는지 등의 상세 정보를 보여준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker service update [image_name]=[number]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 이미 서비스가 진행 중인 상태에서 image가 업데이트 되는 경우, 동작중인 container들을 대체하는 역할을 한다.
* 무중단 서비스에 적합하다.
* 참고로, trouble shooting을 위해 replica당 5개의 최근 프로세스를 남겨두고 있으니, 그게 보이더라도 놀라지는 말자.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker service rm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 진행 중인 서비스를 shutdown할 때 사용
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;docker-network-관련-명령어&quot;&gt;Docker network 관련 명령어&lt;/h2&gt;

&lt;p&gt;container간 연동할 때 사용되는 가상의 overlay network을 생성 할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker network ls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* network 목록을 보여준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker network create —attachable —driver overlay backend&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 'backend'라는 overlay network을 만든다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;docker-stack-관련-명령어&quot;&gt;Docker stack 관련 명령어&lt;/h2&gt;

&lt;p&gt;여러개의 서비스를 한번에 구동시킬 때 사용된다. 목적하는 바는 docker-compose와 유사한 데 이 명령은 swarm에 적용 가능하다는 차이가 있다. 
swarm mode가 아니어도 동작 가능하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker stack deploy –compose-file docker-compose.yml [stack_name]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* docker-compose.yml에 있는 내용을 읽어 여러 서비스들을 한번에 구동시켜준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker stack ls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 목록을 보여준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker stack rm [stack_name]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 삭제한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;자세한 내용과 실습을 위해서는 &lt;a href=&quot;https://subicura.com/2017/02/25/container-orchestration-with-docker-swarm.html&quot;&gt;[Docker Swarm을 이용한 쉽고 빠른 분산 서버 관리]&lt;/a&gt;를 참고하자. 별 다섯개도 모자라다. 단, 아래 내용을 참고하자.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;local.dev 도메인은 쓰지 말자. 자동으로 https로 바뀌면서 페이지를 못 찾을 거다.&lt;/li&gt;
  &lt;li&gt;traefik 관련된 부분에서 labels 입력하는 부분이 조금 바뀌었다. 안되더라도 좌절말고 아래 내용 참고하자. labels만 잘 만져주면 된다.
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;portainer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;portainer/portainer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-H unix:///var/run/docker.sock&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9000:9000&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;frontend&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;traefik&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.port=9000'&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.enable=true'&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.docker.network=traefik'&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.backend=portainer'&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.frontend.rule=Host:portainer.u2pia.local'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - type: bind&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   source: /var/run/docker.sock&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   target: /var/run/docker.sock&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# replicas: 1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;placement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node.role == manager&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;update_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parallelism&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart_policy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;on-failure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wook Hyun</name></author><category term="blog" /><summary type="html">Vagrant commands</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/docker-swarm.jpg" /></entry><entry><title type="html">About the Author</title><link href="http://localhost:4000/facts/about-the-author.html" rel="alternate" type="text/html" title="About the Author" /><published>2016-04-04T00:00:00+09:00</published><updated>2016-04-04T00:00:00+09:00</updated><id>http://localhost:4000/facts/about-the-author</id><content type="html" xml:base="http://localhost:4000/facts/about-the-author.html">&lt;p&gt;/dev/null&lt;/p&gt;</content><author><name>Paul Le</name></author><category term="sample" /><summary type="html">/dev/null</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/cuba-4.jpg" /></entry></feed>